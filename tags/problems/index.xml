<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Problems on RainPot Blog</title>
    <link>/tags/problems/</link>
    <description>Recent content in Problems on RainPot Blog</description>
    
    <language>en</language>
    <lastBuildDate>Fri, 17 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/problems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>剑指offer61-67</title>
      <link>/blog/%E5%89%91%E6%8C%87offer61-67/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%89%91%E6%8C%87offer61-67/</guid>
      <description>61题目描述 序列化二叉树
请实现两个函数，分别用来序列化和反序列化二叉树
二叉树的序列化是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#），以 ！ 表示一个结点值的结束（value!）。
二叉树的反序列化是指：根据某种遍历顺序得到的序列化字符串结果str，重构二叉树。
思路 采用前序遍历，遇到空节点，存入一个特殊字符。运用递归。要熟练使用to_string() 及 stoi()，c_str() strcpy() substr() 的用法。
代码 /* struct TreeNode { int val; struct TreeNode *left; struct TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) { } }; */ class Solution { public: void SerializeHelper(TreeNode *root, string &amp;amp;str) { if(root == NULL) { str += &amp;#34;N,&amp;#34;; return; } str += to_string(root -&amp;gt; val); str += &amp;#34;,&amp;#34;; SerializeHelper(root -&amp;gt; left, str); SerializeHelper(root -&amp;gt; right, str); } char* Serialize(TreeNode *root) { if(root == NULL) return NULL; string s = &amp;#34;&amp;#34;; SerializeHelper(root, s); char* ret = new char[s.</description>
    </item>
    
    <item>
      <title>剑指offer51-60</title>
      <link>/blog/%E5%89%91%E6%8C%87offer51-60/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%89%91%E6%8C%87offer51-60/</guid>
      <description>51题目描述 构建乘积数组
给定一个数组A[0,1,&amp;hellip;,n-1],请构建一个数组B[0,1,&amp;hellip;,n-1],其中B中的元素B[i]=A[0]A[1]&amp;hellip;*A[i-1]A[i+1]&amp;hellip;*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * &amp;hellip; * A[n-1]，B[n-1] = A[0] * A[1] * &amp;hellip; * A[n-2];）
思路1 直接暴力两个循环。。
代码 class Solution { public: vector&amp;lt;int&amp;gt; multiply(const vector&amp;lt;int&amp;gt;&amp;amp; A) { vector&amp;lt;int&amp;gt; result; int temp = 1; if(A.size() == 0) return result; for(int i = 0; i &amp;lt; A.size(); i++) { temp = 1; for(int j = 0; j &amp;lt; A.size(); j++) { if(j == i) continue; else { temp *= A[j]; } } result.</description>
    </item>
    
    <item>
      <title>剑指offer41-50</title>
      <link>/blog/%E5%89%91%E6%8C%87offer41-50/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%89%91%E6%8C%87offer41-50/</guid>
      <description>41题目描述 和为S的连续正数序列
小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!
输出描述:
输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序
思路 采用双指针策略，不需要使用队列，用队列反而变麻烦了。记录两个指针，一个大一个小，计算大小之间这个窗口的和。
代码 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; FindContinuousSequence(int sum) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; Sequences; if(sum &amp;lt; 3) return Sequences; int small = 1; int big = 2; int temp_sum = 3; int mid = (sum + 1) / 2; while(small &amp;lt; mid) { if(temp_sum == sum) { vector&amp;lt;int&amp;gt; temp_sequence; for(int i = small; i &amp;lt;= big; i++) temp_sequence.push_back(i); Sequences.push_back(temp_sequence); } if(temp_sum &amp;gt; sum) { while(temp_sum &amp;gt; sum &amp;amp;&amp;amp; small &amp;lt; mid) { temp_sum -= small; small++; } if(temp_sum == sum) { vector&amp;lt;int&amp;gt; temp_sequence; for(int i = small; i &amp;lt;= big; i++) temp_sequence.</description>
    </item>
    
    <item>
      <title>剑指offer31-40</title>
      <link>/blog/%E5%89%91%E6%8C%87offer31-40/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%89%91%E6%8C%87offer31-40/</guid>
      <description>31题目描述 整数中1出现的次数（从1到n整数中1出现的次数）
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
思路 注意审题，1出现的次数，不是包含1的数有多少个。 问题不要想复杂了，使用简单的模10即可解决。
代码 class Solution { public: int NumberOf1Between1AndN_Solution(int n) { int num = 0; if(n &amp;lt; 1) return 0; for(int i = 1; i &amp;lt;= n; i++) { int temp = i; while(temp) { if(temp % 10 == 1) num++; temp = temp / 10; } } return num; } }; 32题目描述 把数组排成最小的数：
输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。
思路 用vector自带sort函数进行排序，顺序由自己重新定义：a b转换成string后进行比较，ab&amp;lt;ba则保持顺序不变，ab&amp;gt;ba表示后面的要放到前面。这里需要熟悉vector的sort函数以及to_string，string之间的比较。https://blog.csdn.net/ihadl/article/details/7400929
代码 class Solution { public: static bool exchange(int i, int j) { string A = &amp;#34;&amp;#34;; string B = &amp;#34;&amp;#34;; A += to_string(i); A += to_string(j); B += to_string(j); B += to_string(i); return A &amp;lt; B; } string PrintMinNumber(vector&amp;lt;int&amp;gt; numbers) { string result = &amp;#34;&amp;#34;; if(numbers.</description>
    </item>
    
    <item>
      <title>剑指offer21-30</title>
      <link>/blog/%E5%89%91%E6%8C%87offer21-30/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%89%91%E6%8C%87offer21-30/</guid>
      <description>21题目描述 栈的压入、弹出序列：
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
思路 我想的思路是借用一个辅助栈，进行真实的入栈出栈，判断第二个序列与栈顶是否相同，如果不相同，则进行序列1的压入栈。在压入是判断压入的是否与序列2当前元素相等，如果相等，则视为直接出栈，然后返回来判断序列2的下一个元素是否与栈顶相等，相等的话则pop，序列2继续往后走，以此循环。最后判断辅助栈是否为空，如果为空，则出栈顺序没毛病，返回1，如果不为空，则出栈不符合规则，返回0；
代码 class Solution { public: bool IsPopOrder(vector&amp;lt;int&amp;gt; pushV,vector&amp;lt;int&amp;gt; popV) { stack&amp;lt;int&amp;gt; aux; if(pushV.size() != popV.size()) return false; if(pushV.empty() || popV.empty()) return false; int i = 0, j = 0; for(; i &amp;lt; pushV.size() &amp;amp;&amp;amp; j &amp;lt; popV.size();) { if(aux.empty()) { aux.push(pushV[i]); i++; continue; } if(aux.top() != popV[j]) { for(; i &amp;lt; pushV.size(); ) { if(pushV[i] != popV[j]) { aux.push(pushV[i]); i++; } if(pushV[i] == popV[j]) { i++; j++; break; } } continue; } if(aux.</description>
    </item>
    
    <item>
      <title>剑指offer11-20</title>
      <link>/blog/%E5%89%91%E6%8C%87offer11-20/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%89%91%E6%8C%87offer11-20/</guid>
      <description>11题目描述 二进制中1的个数：
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
思路 首先要明白几个常识 1.计算机中整数都是以补码存储，所以此题不需考虑正负问题 2.按位与操作&amp;amp;要熟悉。
题解思路：如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。 举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
代码 class Solution { public: int NumberOf1(int n) { int count = 0; while(n != 0) { count++; n = n &amp;amp; (n - 1); } return count; } }; 12题目描述 数值的整数次方：
给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。
保证base和exponent不同时为0
思路 本题看题解 如果不用pow函数则需要充分考虑base exponent的各种极端情况， 我使用了pow函数，直接ac了。。
代码 class Solution { public: double Power(double base, int exponent) { //if(base == 0) return 0.0; //if(exponent == 0) return 1.0; return pow(base, exponent); } }; 13题目描述 调整数组顺序使奇数位于偶数前面：</description>
    </item>
    
    <item>
      <title>剑指offer01-10</title>
      <link>/blog/%E5%89%91%E6%8C%87offer01-10/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%89%91%E6%8C%87offer01-10/</guid>
      <description>01题目描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 思路 注意这个数组的特点，从左到右递增，从上到下递增，我的思路是利用这个特点进行最简单的遍历查找。
一行一行进行比较，首先从第一行开始，判断行的首元素与target大小，如果首元素大，直接判定数组不包涵此target，如果相等返回true，如果首元素小，从行末往前进行遍历，判断target与每个元素大小，如果元素大，继续向前比，如果元素小，跳出循环进行下一行的比较
**注意！！**编好之后一直堆栈溢出，才发现是没有判断数组是否为空，这点以后一定要注意。
代码 class Solution { public: bool Find(int target, vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; array) { if (array.empty())return false; for(int i=0;i &amp;lt; array.size(); i++) { if(array[i].empty())continue; if(array[i][0] &amp;gt; target) return false; else if(target == array[i][0]) return true; else if(target &amp;gt; array[i][0]) { for(int j=(array[i].size() - 1);j&amp;gt;0;j--) { if(target == array[i][j]) return true; else if(target &amp;lt; array[i][j]) continue; else if(target &amp;gt; array[i][j]) break; } } } return false; } }; 02题目描述 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.</description>
    </item>
    
  </channel>
</rss>
